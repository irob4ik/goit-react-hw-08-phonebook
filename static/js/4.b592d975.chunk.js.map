{"version":3,"sources":["views/views.module.css","components/Form/form.module.css","components/Filter/filter.module.css","components/Contacts/contacts.module.css","../node_modules/uuid/dist/esm-browser/rng.js","redux/phonebook-selectors.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","components/Form/Form.js","components/Filter/Filter.js","components/Contacts/Contacts.js","views/ContactsView.js"],"names":["module","exports","getRandomValues","getContacts","state","contacts","getFilter","filter","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","test","byteToHex","i","push","toString","substr","stringify","arr","offset","arguments","length","undefined","toLowerCase","TypeError","v4","options","buf","rnds","random","Form","useState","name","setName","number","setNumber","dispatch","useDispatch","inputId","uuidv4","handleChange","evt","currentTarget","value","onSubmit","preventDefault","newContact","id","contactActions","addContact","contactsOperations","postContacts","autoComplete","className","styles","phoneBookForm","htmlFor","formLabel","formInput","type","placeholder","onChange","pattern","title","required","formBtn","Filter","useSelector","contactsSelectors","filterLabel","filterInput","e","actions","changeFilter","Contacts","items","list","filteredContacts","useEffect","fetchContacts","map","listItem","contactName","contactBtn","onClick","deleteContacts","deleteContact","normalizedFilter","includes","ContactsView","container","contactList"],"mappings":"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","file":"static/js/4.b592d975.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"welcome\":\"views_welcome__deamk\",\"registerForm\":\"views_registerForm__3QUsL\",\"text_muted\":\"views_text_muted__3XUeo\",\"contactList\":\"views_contactList__34bVV\",\"container\":\"views_container__38k8r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"phoneBookForm\":\"form_phoneBookForm__33bHa\",\"title\":\"form_title__2GrPr\",\"formLabel\":\"form_formLabel__2rVL5\",\"formInput\":\"form_formInput__aMOMk\",\"formBtn\":\"form_formBtn__h-GtD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterLabel\":\"filter_filterLabel__1EUnX\",\"filterInput\":\"filter_filterInput___qdTS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"contacts_list__3whEW\",\"listItem\":\"contacts_listItem__2A5MQ\",\"contactName\":\"contacts_contactName__jrZe1\",\"contactBtn\":\"contacts_contactBtn__hWkbF\"};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export const getContacts = state => state.contacts;\r\n\r\nexport const getFilter = state => state.contacts.filter;","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux'\r\nimport contactActions from '../../redux/phonebook-actions';\r\nimport { contactsOperations } from '../../redux';\r\nimport styles from './form.module.css';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport default function Form() {\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n    const dispatch = useDispatch();\r\n\r\n    const inputId = uuidv4();\r\n\r\n    const handleSubmit = evt => {\r\n        evt.preventDefault();\r\n        const id = uuidv4();\r\n        const newContact = { id, name, number };\r\n\r\n        dispatch(contactActions.addContact(newContact));\r\n        dispatch(contactsOperations.postContacts(newContact));\r\n\r\n        setName('');\r\n        setNumber('');      \r\n    }\r\n\r\n    const handleChange = evt => {\r\n        const { name, value } = evt.currentTarget;\r\n\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n            \r\n            case 'number':\r\n                setNumber(value);\r\n                break;\r\n            \r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>        \r\n        <form onSubmit={handleSubmit}  autoComplete=\"off\" className={styles.phoneBookForm}>\r\n            <label htmlFor={inputId} className={styles.formLabel}>Name</label>\r\n                <input\r\n                    className={styles.formInput}\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    placeholder=\"Enter full name\"\r\n                    id={inputId}\r\n                    value={name}\r\n                    onChange={handleChange}\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    required\r\n                />\r\n            <label htmlFor={inputId} className={styles.formLabel}>Number</label>\r\n                <input\r\n                    className={styles.formInput}\r\n                    type=\"tel\"\r\n                    name=\"number\"\r\n                    placeholder=\"Enter number\"\r\n                    id={inputId}\r\n                    value={number}\r\n                    onChange={handleChange}\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                />\r\n            \r\n          <button type=\"submit\" className={styles.formBtn}>Add contact</button>          \r\n        </form>\r\n        </>\r\n    );    \r\n};","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { contactsSelectors } from '../../redux';\r\nimport actions from '../../redux/phonebook-actions';\r\nimport styles from './filter.module.css'\r\n\r\nexport default function Filter() {\r\n    const value = useSelector(contactsSelectors.getFilter);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <label htmlFor=\"filter\" className={styles.filterLabel}>Find contacts by name\r\n            <input\r\n                className={styles.filterInput}\r\n                type=\"text\"\r\n                value={value}\r\n                onChange={(e) => dispatch(actions.changeFilter(e.currentTarget.value))}\r\n                id=\"filter\"\r\n            />\r\n        </label>\r\n    )\r\n};","import { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { contactsOperations, contactsSelectors } from '../../redux';\r\nimport actions from '../../redux/phonebook-actions';\r\nimport styles from './contacts.module.css'\r\n\r\nexport default function Contacts() {\r\n    const dispatch = useDispatch();\r\n    const { items, filter } = useSelector(contactsSelectors.getContacts);\r\n    const list = filteredContacts(items, filter);\r\n\r\n    useEffect(() => {\r\n        dispatch(contactsOperations.fetchContacts())\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <>\r\n            <ul className={styles.list}>\r\n                {list.map(({ number, name, id }) => (\r\n                    <li key={number} className={styles.listItem}>\r\n                        <p className={styles.contactName}>{name}: {number}</p>\r\n                        <button\r\n                            className={styles.contactBtn}\r\n                            onClick={() => {\r\n                                dispatch(contactsOperations.deleteContacts(id));\r\n                                dispatch(actions.deleteContact(number));                                \r\n                            }}\r\n                        >Delete\r\n                        </button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </>\r\n    )\r\n};\r\n\r\nconst filteredContacts = (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    \r\n    return contacts.filter(({ name }) =>\r\n        name.toLowerCase().includes(normalizedFilter));    \r\n};","import Form from '../components/Form/Form';\r\nimport Filter from '../components/Filter/Filter';\r\nimport Contacts from '../components/Contacts/Contacts';\r\n\r\nimport styles from './views.module.css';\r\n\r\nexport default function ContactsView() {\r\n    return (\r\n    <>\r\n        <Form />\r\n            \r\n        <div className={styles.container}>\r\n            <h2 className={styles.contactList}>MY Contacts</h2>    \r\n            <Filter/>\r\n        </div>\r\n            \r\n        <Contacts />\r\n    </>\r\n    )\r\n}"],"sourceRoot":""}